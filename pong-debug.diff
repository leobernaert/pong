--- pong-original.py	2019-03-08 14:13:29.211539613 +0100
+++ pong-original-debug.py	2019-03-08 14:51:15.899499585 +0100
@@ -2,6 +2,17 @@
 """
 Copyright: 2013 vinothpandian
 téléchargé depuis https://gist.github.com/vinothpandian/4337527
+
+Débogué le 8 mars 2019, par G. Khaznadar, pour
+l'adapter à Python3. Les seules adaptations faites
+ont consisté à replacer les divisions par défaut (/)
+par des divisions entières (//), sachant que Python3
+fait la distinction. Si les variables ne sont pas entières,
+ça crée des exceptions pour l'appel à range, ainsi que pour
+le tracé des objets géométriques.
+
+L'autre débogage a été de placer la dernière instruction, 
+qui était inaccessible, dans la boucle principale du jeu.
 """
 
 import random
@@ -23,8 +34,8 @@
 BALL_RADIUS = 20
 PAD_WIDTH = 8
 PAD_HEIGHT = 80
-HALF_PAD_WIDTH = PAD_WIDTH / 2
-HALF_PAD_HEIGHT = PAD_HEIGHT / 2
+HALF_PAD_WIDTH = PAD_WIDTH // 2
+HALF_PAD_HEIGHT = PAD_HEIGHT // 2
 ball_pos = [0,0]
 ball_vel = [0,0]
 paddle1_vel = 0
@@ -40,7 +51,7 @@
 # if right is True, spawn to the right, else spawn to the left
 def ball_init(right):
     global ball_pos, ball_vel # these are vectors stored as lists
-    ball_pos = [WIDTH/2,HEIGHT/2]
+    ball_pos = [WIDTH//2,HEIGHT//2]
     horz = random.randrange(2,4)
     vert = random.randrange(1,3)
     
@@ -53,8 +64,8 @@
 def init():
     global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel,l_score,r_score  # these are floats
     global score1, score2  # these are ints
-    paddle1_pos = [HALF_PAD_WIDTH - 1,HEIGHT/2]
-    paddle2_pos = [WIDTH +1 - HALF_PAD_WIDTH,HEIGHT/2]
+    paddle1_pos = [HALF_PAD_WIDTH - 1,HEIGHT//2]
+    paddle2_pos = [WIDTH +1 - HALF_PAD_WIDTH,HEIGHT//2]
     l_score = 0
     r_score = 0
     if random.randrange(0,2) == 0:
@@ -68,25 +79,25 @@
     global paddle1_pos, paddle2_pos, ball_pos, ball_vel, l_score, r_score
            
     canvas.fill(BLACK)
-    pygame.draw.line(canvas, WHITE, [WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1)
+    pygame.draw.line(canvas, WHITE, [WIDTH // 2, 0],[WIDTH // 2, HEIGHT], 1)
     pygame.draw.line(canvas, WHITE, [PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1)
     pygame.draw.line(canvas, WHITE, [WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1)
     pygame.draw.circle(canvas, WHITE, [WIDTH//2, HEIGHT//2], 70, 1)
 
     # update paddle's vertical position, keep paddle on the screen
     if paddle1_pos[1] > HALF_PAD_HEIGHT and paddle1_pos[1] < HEIGHT - HALF_PAD_HEIGHT:
-        paddle1_pos[1] += paddle1_vel
+        paddle1_pos[1] += int(paddle1_vel)
     elif paddle1_pos[1] == HALF_PAD_HEIGHT and paddle1_vel > 0:
-        paddle1_pos[1] += paddle1_vel
+        paddle1_pos[1] += int(paddle1_vel)
     elif paddle1_pos[1] == HEIGHT - HALF_PAD_HEIGHT and paddle1_vel < 0:
-        paddle1_pos[1] += paddle1_vel
+        paddle1_pos[1] += int(paddle1_vel)
     
     if paddle2_pos[1] > HALF_PAD_HEIGHT and paddle2_pos[1] < HEIGHT - HALF_PAD_HEIGHT:
-        paddle2_pos[1] += paddle2_vel
+        paddle2_pos[1] += int(paddle2_vel)
     elif paddle2_pos[1] == HALF_PAD_HEIGHT and paddle2_vel > 0:
-        paddle2_pos[1] += paddle2_vel
+        paddle2_pos[1] += int(paddle2_vel)
     elif paddle2_pos[1] == HEIGHT - HALF_PAD_HEIGHT and paddle2_vel < 0:
-        paddle2_pos[1] += paddle2_vel
+        paddle2_pos[1] += int(paddle2_vel)
 
     #update ball
     ball_pos[0] += int(ball_vel[0])
@@ -171,4 +182,4 @@
             sys.exit()
             
     pygame.display.update()
-fps.tick(60)
+    fps.tick(60)
